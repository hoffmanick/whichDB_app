import { DefineComponent, ComputedRef, ComponentOptionsMixin, PublicProps, ExtractPropTypes, PropType } from 'vue';
import { type LayersCommonProps } from './LayersCommonProps';
import { WebGLVectorLayer } from "./WebGLVectorLayerClass";
import type { WebGLStyle } from "ol/style/webgl";
declare const _default: __VLS_WithTemplateSlots<DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<LayersCommonProps & {
    disableHitDetection?: boolean | undefined;
    styles: WebGLStyle;
}>, {
    disableHitDetection: boolean;
    styles: () => {
        "shape-points": number;
        "shape-radius": number;
        "shape-opacity": number;
        "shape-fill-color": string;
    };
    className: string;
    opacity: number;
    visible: boolean;
    properties: () => {};
}>, {
    webglVectorLayer: ComputedRef<WebGLVectorLayer>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<LayersCommonProps & {
    disableHitDetection?: boolean | undefined;
    styles: WebGLStyle;
}>, {
    disableHitDetection: boolean;
    styles: () => {
        "shape-points": number;
        "shape-radius": number;
        "shape-opacity": number;
        "shape-fill-color": string;
    };
    className: string;
    opacity: number;
    visible: boolean;
    properties: () => {};
}>>>, {
    styles: WebGLStyle;
    properties: () => Record<string, unknown>;
    className: string;
    opacity: number;
    visible: boolean;
    disableHitDetection: boolean;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
